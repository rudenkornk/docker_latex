name: Workflow
on:
  workflow_dispatch:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Show machine info
      run: |
        id
        df -h
        docker image ls
        docker container ls
        docker container ls --all
    - name: Install prerequisites
      run: |
        sudo apt-get install \
          moreutils \

    - name: Set environment
      run: |
        echo "IMAGE_NAME=$(make --question docker_image_name)" >> $GITHUB_ENV
        echo "IMAGE_TAG=$(make --question docker_image_tag)" >> $GITHUB_ENV
        IS_DEPLOY=$( \
          [[ \
             ( \
               '${{ github.event_name }}' == 'push' || \
               '${{ github.event_name }}' == 'workflow_dispatch' \
             ) && \
             ${{ contains(github.event.head_commit.message, '[DEPLOY]') }} == true \
          ]] && echo true || echo false \
        )
        echo "IS_DEPLOY=$IS_DEPLOY" >> $GITHUB_ENV
    - name: Download cache from Docker Hub
      # Here we assume that latest release have common layers that should speed up our build
      run: |
        docker manifest inspect $IMAGE_NAME:latest &> /dev/null && \
        docker pull $IMAGE_NAME:latest
    - name: Build
      run: |
        DOCKER_CACHE_FROM=$IMAGE_NAME:latest \
        make docker_image
    - name: Test
      run: make check
    - name: Clean
      run: make clean
    - name: Login to Docker Hub
      if: env.IS_DEPLOY == 'true'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - name: Check there is not already such tag on Docker Hub
      if: env.IS_DEPLOY == 'true'
      run: $(docker manifest inspect $IMAGE_TAG &> /dev/null) && exit 1
    - name: Push image to Docker Hub
      if: env.IS_DEPLOY == 'true'
      run: |
        docker tag $IMAGE_TAG $IMAGE_NAME:latest
        docker push $IMAGE_TAG
        docker push $IMAGE_NAME:latest

